{"version":3,"sources":["components/Card.js","components/CardList.js","robots.js","components/Scroll.js","components/SearchBox.js","components/ErrorBoundary.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","alt","src","cardList","robots","map","user","i","key","username","Scroll","props","style","overflowY","border","height","children","SearchBox","searchChange","type","placeholder","onChange","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","searchfield","target","value","filteredRobots","filter","robot","toLowerCase","includes","length","CardList","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"oOAmBeA,EAjBF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,GAE5B,OACC,yBAAKC,UAAU,oDACd,yBAAKC,IAAI,SAASC,IAAG,+BAA6B,EAAHH,EAA1B,mBACrB,6BACC,4BACEF,GAEF,2BACEC,MCWSK,EAnBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAIlB,OACE,6BAEIA,EAAOC,KAAI,SAACC,EAAMC,GAChB,OAAQ,kBAAC,EAAD,CACNC,IAAKD,EACLR,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,aChBhBM,EAAS,CAClB,CACIL,GAAI,EACJF,KAAM,gBACNY,SAAU,OACVX,MAAO,sBAEX,CACIC,GAAI,EACJF,KAAM,gBACNY,SAAU,OACVX,MAAO,oBAEX,CACIC,GAAI,EACJF,KAAM,kBACNY,SAAU,SACVX,MAAO,qBAEX,CACIC,GAAI,EACJF,KAAM,gBACNY,SAAU,MACVX,MAAO,kBAEX,CACIC,GAAI,EACJF,KAAM,eACNY,SAAU,OACVX,MAAO,oBAEX,CACIC,GAAI,EACJF,KAAM,kBACNY,SAAU,QACVX,MAAO,wBAEX,CACIC,GAAI,EACJF,KAAM,iBACNY,SAAU,eACVX,MAAO,qBAEX,CACIC,GAAI,EACJF,KAAM,eACNY,SAAU,UACVX,MAAO,qBCjCAY,EAZA,SAACC,GACb,OACG,yBAAKC,MAAO,CACTC,UAAW,SACXC,OAAQ,kBACRC,OAAQ,UAEPJ,EAAMK,SALV,MCSSC,EAXG,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aACpB,OACC,yBAAKlB,UAAU,OACd,2BACCA,UAAU,mCACVmB,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCaCI,G,wDAnBZ,WAAYX,GAAO,IAAD,8BACf,cAAMA,IACDY,MAAQ,CACVC,UAAU,GAHE,E,8DAOAC,EAAOC,GACtBC,KAAKC,SAAS,CAACJ,UAAU,M,+BAIzB,OAAGG,KAAKJ,MAAMC,SACJ,2DAEHG,KAAKhB,MAAMK,a,GAhBIa,cCgDbC,E,kDAvCd,aAAe,IAAD,8BACb,gBAaDC,eAAiB,SAACC,GACjB,EAAKJ,SAAS,CAAEK,YAAaD,EAAME,OAAOC,SAb1C,EAAKZ,MAAQ,CACZnB,OAAQA,EACR6B,YAAa,IAJD,E,qDAkBJ,IAAD,EACwBN,KAAKJ,MAA7BnB,EADA,EACAA,OAAQ6B,EADR,EACQA,YACVG,EAAiBhC,EAAOiC,QAAO,SAAAC,GACpC,OAAOA,EAAMzC,KAAK0C,cAAcC,SAASP,EAAYM,kBAEtD,OAAQnC,EAAOqC,OAEd,yBAAKzC,UAAU,MACd,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWkB,aAAcS,KAAKI,iBAC9B,kBAAC,EAAD,KACC,kBAAC,EAAD,KACC,kBAACW,EAAD,CAAUtC,OAAQgC,OANrB,wBAAIpC,UAAU,SAAd,e,GA1Be6B,aCGEc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAlC,GACLmC,QAAQnC,MAAMA,EAAMoC,a","file":"static/js/main.810612ae.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({ name, email, id }) => {\n\t// const {name, email, id} = propertiez;\n\treturn (\n\t\t<div className='bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n\t\t\t<img alt='robots' src={`https://robohash.org/${id*+3}?size=200x200`} />\n\t\t\t<div>\n\t\t\t\t<h2>\n\t\t\t\t\t{name}\n\t\t\t\t</h2>\n\t\t\t\t<p>\n\t\t\t\t\t{email}\n\t\t\t\t</p>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\n\nconst cardList = ({ robots }) => {\n  // if(true){\n  //   throw new Error('NOOOOOOOOOO');\n  // }\n  return (\n    <div>\n      {\n        robots.map((user, i) => {\n          return (<Card\n            key={i}\n            id={robots[i].id}\n            name={robots[i].name}\n            email={robots[i].email} />);\n        })\n      }\n    </div>\n  );\n}\n\nexport default cardList;","export const robots = [\n    {\n        id: 1,\n        name: 'Ivan Lastovko',\n        username: 'Vano',\n        email: 'krasav4ek@ivan.com'\n    },\n    {\n        id: 2,\n        name: 'Alex Kotsetov',\n        username: 'Alex',\n        email: 'korsetov@mail.ru'\n    },\n    {\n        id: 3,\n        name: 'Andres Holtsman',\n        username: 'andres',\n        email: 'andres@taltech.ee'\n    },\n    {\n        id: 4,\n        name: 'Edvard Ehiloo',\n        username: 'BMW',\n        email: 'mashina@bmw.ru'\n    },\n    {\n        id: 5,\n        name: 'Vova Shulzik',\n        username: 'vova',\n        email: 'volodja@vova.com'\n    },\n    {\n        id: 6,\n        name: 'Alex Poltoracky',\n        username: 'ljoha',\n        email: 'ericsson@ericsson.ee'\n    },\n    {\n        id: 7,\n        name: 'Andres Kokurin',\n        username: 'mr_prezident',\n        email: 'andrei@kokurin.ee'\n    },\n    {\n        id: 8,\n        name: 'Sergei Rassk',\n        username: 'serjoga',\n        email: 'serjoga@narva.ru'\n    }\n]","import React from 'react';\n\nconst Scroll = (props) => {\n   return (\n      <div style={{\n         overflowY: 'scroll',\n         border: '1px solid black',\n         height: '800px'\n      }}>\n         {props.children};\n      </div>\n   )\n}\n\nexport default Scroll;","import React from 'react';\n\nconst SearchBox = ({ searchChange }) => {\n\treturn (\n\t\t<div className='pa2'>\n\t\t\t<input\n\t\t\t\tclassName='pa3 ba b--green bg-lightest-blue'\n\t\t\t\ttype='search'\n\t\t\t\tplaceholder='search robots'\n\t\t\t\tonChange={searchChange} />\n\t\t</div>\n\t);\n}\nexport default SearchBox;","import React, { Component } from 'react';\n\nclass ErrorBoundary extends Component {\n   constructor(props){\n      super(props);\n      this.state = {\n         hasError: false\n      }\n   }\n\n   componentDidCatch(error, info){\n      this.setState({hasError: true})\n   }\n\n   render(){\n      if(this.state.hasError){\n         return <h1>Ooops. That is not good :( </h1>\n      }\n      return this.props.children\n   }\n}\n\nexport default ErrorBoundary;","import React, { Component } from 'react';\nimport CardList from '../components/CardList';\nimport { robots } from '../robots';\nimport Scroll from '../components/Scroll';\nimport SearchBox from '../components/SearchBox';\nimport './App.css';\nimport ErrorBoundary from '../components/ErrorBoundary';\n\n\nclass App extends Component {\n\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = {\n\t\t\trobots: robots,\n\t\t\tsearchfield: ''\n\t\t}\n\t}\n\n\t// componentDidMount() {\n\t// \tfetch('https://jsonplaceholder.typicode.com/users')\n\t// \t\t.then(response => response.json())\n\t// \t\t.then(users => this.setState({ robots: users }));\n\t// }\n\n\tonSearchChange = (event) => {\n\t\tthis.setState({ searchfield: event.target.value });\n\t}\n\n\trender() {\n\t\tconst { robots, searchfield } = this.state;\n\t\tconst filteredRobots = robots.filter(robot => {\n\t\t\treturn robot.name.toLowerCase().includes(searchfield.toLowerCase());\n\t\t});\n\t\treturn !robots.length ?\n\t\t\t<h1 className='tc f1'>Loading</h1> :\n\t\t\t<div className='tc' >\n\t\t\t\t<h1 className='f1'>RoboFriends</h1>\n\t\t\t\t<SearchBox searchChange={this.onSearchChange} />\n\t\t\t\t<Scroll>\n\t\t\t\t\t<ErrorBoundary>\n\t\t\t\t\t\t<CardList robots={filteredRobots} />\n\t\t\t\t\t</ErrorBoundary>\n\t\t\t\t</Scroll>\n\t\t\t</div>\n\n\t}\n\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}